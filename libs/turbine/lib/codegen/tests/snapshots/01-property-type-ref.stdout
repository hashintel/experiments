localhost_3000/alice/property/country_code.rs

use error_stack::{Report, Result, ResultExt as _};
use serde::Serialize;
use turbine::{
    types::data::Text, url, DataType, DataTypeMut, DataTypeRef, GenericPropertyError, PropertyType,
    PropertyTypeMut, PropertyTypeRef, Type, TypeMut, TypeRef, TypeUrl, VersionedUrlRef,
};
///Country Code (ISO 3166-1 alpha-2)
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
pub struct CountryCode(pub Text);
impl TypeUrl for CountryCode {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("http://localhost:3000/@alice/types/property-type/countryCode/" / v / 1u32);
}
impl Type for CountryCode {
    type Mut < 'a > = CountryCodeMut < 'a > where Self : 'a ;
    type Ref < 'a > = CountryCodeRef < 'a > where Self : 'a ;

    fn as_mut(&mut self) -> CountryCodeMut<'_> {
        let Self(value) = self;
        CountryCodeMut(<Text as Type>::as_mut(value))
    }

    fn as_ref(&self) -> CountryCodeRef<'_> {
        let Self(value) = self;
        CountryCodeRef(<Text as Type>::as_ref(value))
    }
}
impl PropertyType for CountryCode {
    type Error = GenericPropertyError;

    fn try_from_value(value: serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <Text as DataType>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type CountryCodeV1 = CountryCode;
///Country Code (ISO 3166-1 alpha-2)
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
pub struct CountryCodeRef<'a>(pub <Text as Type>::Ref<'a>);
impl TypeUrl for CountryCodeRef<'_> {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("http://localhost:3000/@alice/types/property-type/countryCode/" / v / 1u32);
}
impl TypeRef for CountryCodeRef<'_> {
    type Owned = CountryCode;

    fn into_owned(self) -> CountryCode {
        let Self(value) = self;
        CountryCode(<<Text as Type>::Ref<'_> as TypeRef>::into_owned(value))
    }
}
impl<'a> PropertyTypeRef<'a> for CountryCodeRef<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <<Text as Type>::Ref<'a> as DataTypeRef<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type CountryCodeV1Ref<'a> = CountryCodeRef<'a>;
///Country Code (ISO 3166-1 alpha-2)
#[derive(Debug, Serialize)]
pub struct CountryCodeMut<'a>(pub <Text as Type>::Mut<'a>);
impl TypeUrl for CountryCodeMut<'_> {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("http://localhost:3000/@alice/types/property-type/countryCode/" / v / 1u32);
}
impl TypeMut for CountryCodeMut<'_> {
    type Owned = CountryCode;

    fn into_owned(self) -> CountryCode {
        let Self(value) = self;
        CountryCode(<<Text as Type>::Mut<'_> as TypeMut>::into_owned(value))
    }
}
impl<'a> PropertyTypeMut<'a> for CountryCodeMut<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <<Text as Type>::Mut<'a> as DataTypeMut<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type CountryCodeV1Mut<'a> = CountryCodeMut<'a>;
