https_blockprotocol_org_alice_property_type_user_id/mod.rs

use error_stack::{Report, Result, ResultExt as _};
use serde::Serialize;
use turbine::{
    types::data::Number, url, DataType, DataTypeMut, DataTypeRef, GenericPropertyError,
    PropertyType, PropertyTypeMut, PropertyTypeRef, Type, TypeMut, TypeRef, TypeUrl,
    VersionedUrlRef,
};
///User ID
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
pub struct UserId(pub Number);
impl TypeUrl for UserId {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("https://blockprotocol.org/@alice/property-type/user-id/" / v / 2u32);
}
impl Type for UserId {
    type Mut < 'a > = UserIdMut < 'a > where Self : 'a ;
    type Ref < 'a > = UserIdRef < 'a > where Self : 'a ;

    fn as_mut(&mut self) -> UserIdMut<'_> {
        let Self(value) = self;
        UserIdMut(<Number as Type>::as_mut(value))
    }

    fn as_ref(&self) -> UserIdRef<'_> {
        let Self(value) = self;
        UserIdRef(<Number as Type>::as_ref(value))
    }
}
impl PropertyType for UserId {
    type Error = GenericPropertyError;

    fn try_from_value(value: serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <Number as DataType>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type UserIdV2 = UserId;
///User ID
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
pub struct UserIdRef<'a>(pub <Number as Type>::Ref<'a>);
impl TypeUrl for UserIdRef<'_> {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("https://blockprotocol.org/@alice/property-type/user-id/" / v / 2u32);
}
impl TypeRef for UserIdRef<'_> {
    type Owned = UserId;

    fn into_owned(self) -> UserId {
        let Self(value) = self;
        UserId(<<Number as Type>::Ref<'_> as TypeRef>::into_owned(value))
    }
}
impl<'a> PropertyTypeRef<'a> for UserIdRef<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <<Number as Type>::Ref<'a> as DataTypeRef<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type UserIdV2Ref<'a> = UserIdRef<'a>;
///User ID
#[derive(Debug, Serialize)]
pub struct UserIdMut<'a>(pub <Number as Type>::Mut<'a>);
impl TypeUrl for UserIdMut<'_> {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("https://blockprotocol.org/@alice/property-type/user-id/" / v / 2u32);
}
impl TypeMut for UserIdMut<'_> {
    type Owned = UserId;

    fn into_owned(self) -> UserId {
        let Self(value) = self;
        UserId(<<Number as Type>::Mut<'_> as TypeMut>::into_owned(value))
    }
}
impl<'a> PropertyTypeMut<'a> for UserIdMut<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <<Number as Type>::Mut<'a> as DataTypeMut<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type UserIdV2Mut<'a> = UserIdMut<'a>;
pub mod v1;
pub use v1::UserIdV1;


---

https_blockprotocol_org_alice_property_type_user_id/v1.rs

use error_stack::{Report, Result, ResultExt as _};
use serde::Serialize;
use turbine::{
    types::data::Text, url, DataType, DataTypeMut, DataTypeRef, GenericPropertyError, PropertyType,
    PropertyTypeMut, PropertyTypeRef, Type, TypeMut, TypeRef, TypeUrl, VersionedUrlRef,
};
///User ID
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
pub struct UserIdV1(pub Text);
impl TypeUrl for UserIdV1 {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("https://blockprotocol.org/@alice/property-type/user-id/" / v / 1u32);
}
impl Type for UserIdV1 {
    type Mut < 'a > = UserIdV1Mut < 'a > where Self : 'a ;
    type Ref < 'a > = UserIdV1Ref < 'a > where Self : 'a ;

    fn as_mut(&mut self) -> UserIdV1Mut<'_> {
        let Self(value) = self;
        UserIdV1Mut(<Text as Type>::as_mut(value))
    }

    fn as_ref(&self) -> UserIdV1Ref<'_> {
        let Self(value) = self;
        UserIdV1Ref(<Text as Type>::as_ref(value))
    }
}
impl PropertyType for UserIdV1 {
    type Error = GenericPropertyError;

    fn try_from_value(value: serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <Text as DataType>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
///User ID
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
pub struct UserIdV1Ref<'a>(pub <Text as Type>::Ref<'a>);
impl TypeUrl for UserIdV1Ref<'_> {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("https://blockprotocol.org/@alice/property-type/user-id/" / v / 1u32);
}
impl TypeRef for UserIdV1Ref<'_> {
    type Owned = UserIdV1;

    fn into_owned(self) -> UserIdV1 {
        let Self(value) = self;
        UserIdV1(<<Text as Type>::Ref<'_> as TypeRef>::into_owned(value))
    }
}
impl<'a> PropertyTypeRef<'a> for UserIdV1Ref<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <<Text as Type>::Ref<'a> as DataTypeRef<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
///User ID
#[derive(Debug, Serialize)]
pub struct UserIdV1Mut<'a>(pub <Text as Type>::Mut<'a>);
impl TypeUrl for UserIdV1Mut<'_> {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("https://blockprotocol.org/@alice/property-type/user-id/" / v / 1u32);
}
impl TypeMut for UserIdV1Mut<'_> {
    type Owned = UserIdV1;

    fn into_owned(self) -> UserIdV1 {
        let Self(value) = self;
        UserIdV1(<<Text as Type>::Mut<'_> as TypeMut>::into_owned(value))
    }
}
impl<'a> PropertyTypeMut<'a> for UserIdV1Mut<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <<Text as Type>::Mut<'a> as DataTypeMut<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
