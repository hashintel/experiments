localhost_3000/alice/property/full_email.rs

use error_stack::{Report, Result, ResultExt as _};
use serde::Serialize;
use turbine::{
    url, DataType, DataTypeMut, DataTypeRef, GenericPropertyError, PropertyType, PropertyTypeMut,
    PropertyTypeRef, Type, TypeMut, TypeRef, TypeUrl, VersionedUrlRef,
};

use crate::localhost_3000::alice::property::{
    primary_email::PrimaryEmail, secondary_email::SecondaryEmail,
};
///Full Email
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
pub struct FullEmail {
    #[serde(rename = "http://localhost:3000/@alice/types/property-type/primaryEmail/")]
    pub primary_email: PrimaryEmail,
    #[serde(rename = "http://localhost:3000/@alice/types/property-type/secondaryEmail/")]
    pub secondary_email: Option<SecondaryEmail>,
}
impl TypeUrl for FullEmail {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("http://localhost:3000/@alice/types/property-type/fullEmail/" / v / 1u32);
}
impl Type for FullEmail {
    type Mut < 'a > = FullEmailMut < 'a > where Self : 'a ;
    type Ref < 'a > = FullEmailRef < 'a > where Self : 'a ;

    fn as_mut(&mut self) -> FullEmailMut<'_> {
        let Self {
            primary_email,
            secondary_email,
        } = self;
        FullEmailMut {
            primary_email: <PrimaryEmail as Type>::as_mut(primary_email),
            secondary_email: secondary_email
                .as_mut()
                .map(|secondary_email| <SecondaryEmail as Type>::as_mut(secondary_email)),
        }
    }

    fn as_ref(&self) -> FullEmailRef<'_> {
        let Self {
            primary_email,
            secondary_email,
        } = self;
        FullEmailRef {
            primary_email: <PrimaryEmail as Type>::as_ref(primary_email),
            secondary_email: secondary_email
                .as_ref()
                .map(|secondary_email| <SecondaryEmail as Type>::as_ref(secondary_email)),
        }
    }
}
impl PropertyType for FullEmail {
    type Error = GenericPropertyError;

    fn try_from_value(value: serde_json::Value) -> Result<Self, Self::Error> {
        'variant: {
            let serde_json::Value::Object(mut properties) = value.clone() else {
                break 'variant Err(Report::new(GenericPropertyError::ExpectedObject));
            };
            let primary_email = 'property: {
                let value = properties
                    .remove("http://localhost:3000/@alice/types/property-type/primaryEmail/");
                let Some(value) = value else {
                    break 'property Err(Report::new(GenericPropertyError::ExpectedProperty(
                        "http://localhost:3000/@alice/types/property-type/primaryEmail/",
                    )));
                };
                let value = <PrimaryEmail>::try_from_value(value).change_context(
                    GenericPropertyError::Property(
                        "http://localhost:3000/@alice/types/property-type/primaryEmail/",
                    ),
                );
                value
            };
            let secondary_email = 'property: {
                let value = properties
                    .remove("http://localhost:3000/@alice/types/property-type/secondaryEmail/");
                let Some(value) = value else {
                    break 'property Ok(None);
                };
                if value.is_null() {
                    break 'property Ok(None);
                };
                let value = <SecondaryEmail>::try_from_value(value).change_context(
                    GenericPropertyError::Property(
                        "http://localhost:3000/@alice/types/property-type/secondaryEmail/",
                    ),
                );
                value.map(Some)
            };
            let __report0 = turbine::fold_tuple_reports((primary_email, secondary_email));
            let ((primary_email, secondary_email),) = turbine::fold_tuple_reports((__report0,))?;
            let this = Self {
                primary_email,
                secondary_email,
            };
            Ok(this)
        }
    }
}
pub type FullEmailV1 = FullEmail;
///Full Email
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
pub struct FullEmailRef<'a> {
    #[serde(rename = "http://localhost:3000/@alice/types/property-type/primaryEmail/")]
    pub primary_email: <PrimaryEmail as Type>::Ref<'a>,
    #[serde(rename = "http://localhost:3000/@alice/types/property-type/secondaryEmail/")]
    pub secondary_email: Option<<SecondaryEmail as Type>::Ref<'a>>,
}
impl TypeUrl for FullEmailRef<'_> {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("http://localhost:3000/@alice/types/property-type/fullEmail/" / v / 1u32);
}
impl TypeRef for FullEmailRef<'_> {
    type Owned = FullEmail;

    fn into_owned(self) -> FullEmail {
        let Self {
            primary_email,
            secondary_email,
        } = self;
        FullEmail {
            primary_email: <<PrimaryEmail as Type>::Ref<'_> as TypeRef>::into_owned(primary_email),
            secondary_email: secondary_email.map(|secondary_email| {
                <<SecondaryEmail as Type>::Ref<'_> as TypeRef>::into_owned(secondary_email)
            }),
        }
    }
}
impl<'a> PropertyTypeRef<'a> for FullEmailRef<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, Self::Error> {
        'variant: {
            let serde_json::Value::Object(properties) = value else {
                break 'variant Err(Report::new(GenericPropertyError::ExpectedObject));
            };
            let primary_email = 'property: {
                let value = properties
                    .get("http://localhost:3000/@alice/types/property-type/primaryEmail/");
                let Some(value) = value else {
                    break 'property Err(Report::new(GenericPropertyError::ExpectedProperty(
                        "http://localhost:3000/@alice/types/property-type/primaryEmail/",
                    )));
                };
                let value = <<PrimaryEmail as Type>::Ref<'a>>::try_from_value(value)
                    .change_context(GenericPropertyError::Property(
                        "http://localhost:3000/@alice/types/property-type/primaryEmail/",
                    ));
                value
            };
            let secondary_email = 'property: {
                let value = properties
                    .get("http://localhost:3000/@alice/types/property-type/secondaryEmail/");
                let Some(value) = value else {
                    break 'property Ok(None);
                };
                if value.is_null() {
                    break 'property Ok(None);
                };
                let value = <<SecondaryEmail as Type>::Ref<'a>>::try_from_value(value)
                    .change_context(GenericPropertyError::Property(
                        "http://localhost:3000/@alice/types/property-type/secondaryEmail/",
                    ));
                value.map(Some)
            };
            let __report0 = turbine::fold_tuple_reports((primary_email, secondary_email));
            let ((primary_email, secondary_email),) = turbine::fold_tuple_reports((__report0,))?;
            let this = Self {
                primary_email,
                secondary_email,
            };
            Ok(this)
        }
    }
}
pub type FullEmailV1Ref<'a> = FullEmailRef<'a>;
///Full Email
#[derive(Debug, Serialize)]
pub struct FullEmailMut<'a> {
    #[serde(rename = "http://localhost:3000/@alice/types/property-type/primaryEmail/")]
    pub primary_email: <PrimaryEmail as Type>::Mut<'a>,
    #[serde(rename = "http://localhost:3000/@alice/types/property-type/secondaryEmail/")]
    pub secondary_email: Option<<SecondaryEmail as Type>::Mut<'a>>,
}
impl TypeUrl for FullEmailMut<'_> {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("http://localhost:3000/@alice/types/property-type/fullEmail/" / v / 1u32);
}
impl TypeMut for FullEmailMut<'_> {
    type Owned = FullEmail;

    fn into_owned(self) -> FullEmail {
        let Self {
            primary_email,
            secondary_email,
        } = self;
        FullEmail {
            primary_email: <<PrimaryEmail as Type>::Mut<'_> as TypeMut>::into_owned(primary_email),
            secondary_email: secondary_email.map(|secondary_email| {
                <<SecondaryEmail as Type>::Mut<'_> as TypeMut>::into_owned(secondary_email)
            }),
        }
    }
}
impl<'a> PropertyTypeMut<'a> for FullEmailMut<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, Self::Error> {
        'variant: {
            let serde_json::Value::Object(properties) = value else {
                break 'variant Err(Report::new(GenericPropertyError::ExpectedObject));
            };
            let primary_email = 'property: {
                let value = unsafe {
                    let value = properties
                        .get_mut("http://localhost:3000/@alice/types/property-type/primaryEmail/");
                    let value = value.map(|value| value as *mut _);
                    value.map(|value: *mut serde_json::Value| &mut *value)
                };
                let Some(value) = value else {
                    break 'property Err(Report::new(GenericPropertyError::ExpectedProperty(
                        "http://localhost:3000/@alice/types/property-type/primaryEmail/",
                    )));
                };
                let value = <<PrimaryEmail as Type>::Mut<'a>>::try_from_value(value)
                    .change_context(GenericPropertyError::Property(
                        "http://localhost:3000/@alice/types/property-type/primaryEmail/",
                    ));
                value
            };
            let secondary_email = 'property: {
                let value = unsafe {
                    let value = properties.get_mut(
                        "http://localhost:3000/@alice/types/property-type/secondaryEmail/",
                    );
                    let value = value.map(|value| value as *mut _);
                    value.map(|value: *mut serde_json::Value| &mut *value)
                };
                let Some(value) = value else {
                    break 'property Ok(None);
                };
                if value.is_null() {
                    break 'property Ok(None);
                };
                let value = <<SecondaryEmail as Type>::Mut<'a>>::try_from_value(value)
                    .change_context(GenericPropertyError::Property(
                        "http://localhost:3000/@alice/types/property-type/secondaryEmail/",
                    ));
                value.map(Some)
            };
            let __report0 = turbine::fold_tuple_reports((primary_email, secondary_email));
            let ((primary_email, secondary_email),) = turbine::fold_tuple_reports((__report0,))?;
            let this = Self {
                primary_email,
                secondary_email,
            };
            Ok(this)
        }
    }
}
pub type FullEmailV1Mut<'a> = FullEmailMut<'a>;


---

localhost_3000/alice/property/primary_email.rs

use error_stack::{Report, Result, ResultExt as _};
use serde::Serialize;
use turbine::{
    types::data::Text, url, DataType, DataTypeMut, DataTypeRef, GenericPropertyError, PropertyType,
    PropertyTypeMut, PropertyTypeRef, Type, TypeMut, TypeRef, TypeUrl, VersionedUrlRef,
};
///Primary E-Mail
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
pub struct PrimaryEmail(pub Text);
impl TypeUrl for PrimaryEmail {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("http://localhost:3000/@alice/types/property-type/primaryEmail/" / v / 1u32);
}
impl Type for PrimaryEmail {
    type Mut < 'a > = PrimaryEmailMut < 'a > where Self : 'a ;
    type Ref < 'a > = PrimaryEmailRef < 'a > where Self : 'a ;

    fn as_mut(&mut self) -> PrimaryEmailMut<'_> {
        let Self(value) = self;
        PrimaryEmailMut(<Text as Type>::as_mut(value))
    }

    fn as_ref(&self) -> PrimaryEmailRef<'_> {
        let Self(value) = self;
        PrimaryEmailRef(<Text as Type>::as_ref(value))
    }
}
impl PropertyType for PrimaryEmail {
    type Error = GenericPropertyError;

    fn try_from_value(value: serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <Text as DataType>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type PrimaryEmailV1 = PrimaryEmail;
///Primary E-Mail
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
pub struct PrimaryEmailRef<'a>(pub <Text as Type>::Ref<'a>);
impl TypeUrl for PrimaryEmailRef<'_> {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("http://localhost:3000/@alice/types/property-type/primaryEmail/" / v / 1u32);
}
impl TypeRef for PrimaryEmailRef<'_> {
    type Owned = PrimaryEmail;

    fn into_owned(self) -> PrimaryEmail {
        let Self(value) = self;
        PrimaryEmail(<<Text as Type>::Ref<'_> as TypeRef>::into_owned(value))
    }
}
impl<'a> PropertyTypeRef<'a> for PrimaryEmailRef<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <<Text as Type>::Ref<'a> as DataTypeRef<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type PrimaryEmailV1Ref<'a> = PrimaryEmailRef<'a>;
///Primary E-Mail
#[derive(Debug, Serialize)]
pub struct PrimaryEmailMut<'a>(pub <Text as Type>::Mut<'a>);
impl TypeUrl for PrimaryEmailMut<'_> {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("http://localhost:3000/@alice/types/property-type/primaryEmail/" / v / 1u32);
}
impl TypeMut for PrimaryEmailMut<'_> {
    type Owned = PrimaryEmail;

    fn into_owned(self) -> PrimaryEmail {
        let Self(value) = self;
        PrimaryEmail(<<Text as Type>::Mut<'_> as TypeMut>::into_owned(value))
    }
}
impl<'a> PropertyTypeMut<'a> for PrimaryEmailMut<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <<Text as Type>::Mut<'a> as DataTypeMut<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type PrimaryEmailV1Mut<'a> = PrimaryEmailMut<'a>;


---

localhost_3000/alice/property/secondary_email.rs

use error_stack::{Report, Result, ResultExt as _};
use serde::Serialize;
use turbine::{
    types::data::Text, url, DataType, DataTypeMut, DataTypeRef, GenericPropertyError, PropertyType,
    PropertyTypeMut, PropertyTypeRef, Type, TypeMut, TypeRef, TypeUrl, VersionedUrlRef,
};
///Secondary E-Mail
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
pub struct SecondaryEmail(pub Text);
impl TypeUrl for SecondaryEmail {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("http://localhost:3000/@alice/types/property-type/secondaryEmail/" / v / 1u32);
}
impl Type for SecondaryEmail {
    type Mut < 'a > = SecondaryEmailMut < 'a > where Self : 'a ;
    type Ref < 'a > = SecondaryEmailRef < 'a > where Self : 'a ;

    fn as_mut(&mut self) -> SecondaryEmailMut<'_> {
        let Self(value) = self;
        SecondaryEmailMut(<Text as Type>::as_mut(value))
    }

    fn as_ref(&self) -> SecondaryEmailRef<'_> {
        let Self(value) = self;
        SecondaryEmailRef(<Text as Type>::as_ref(value))
    }
}
impl PropertyType for SecondaryEmail {
    type Error = GenericPropertyError;

    fn try_from_value(value: serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <Text as DataType>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type SecondaryEmailV1 = SecondaryEmail;
///Secondary E-Mail
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
pub struct SecondaryEmailRef<'a>(pub <Text as Type>::Ref<'a>);
impl TypeUrl for SecondaryEmailRef<'_> {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("http://localhost:3000/@alice/types/property-type/secondaryEmail/" / v / 1u32);
}
impl TypeRef for SecondaryEmailRef<'_> {
    type Owned = SecondaryEmail;

    fn into_owned(self) -> SecondaryEmail {
        let Self(value) = self;
        SecondaryEmail(<<Text as Type>::Ref<'_> as TypeRef>::into_owned(value))
    }
}
impl<'a> PropertyTypeRef<'a> for SecondaryEmailRef<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <<Text as Type>::Ref<'a> as DataTypeRef<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type SecondaryEmailV1Ref<'a> = SecondaryEmailRef<'a>;
///Secondary E-Mail
#[derive(Debug, Serialize)]
pub struct SecondaryEmailMut<'a>(pub <Text as Type>::Mut<'a>);
impl TypeUrl for SecondaryEmailMut<'_> {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("http://localhost:3000/@alice/types/property-type/secondaryEmail/" / v / 1u32);
}
impl TypeMut for SecondaryEmailMut<'_> {
    type Owned = SecondaryEmail;

    fn into_owned(self) -> SecondaryEmail {
        let Self(value) = self;
        SecondaryEmail(<<Text as Type>::Mut<'_> as TypeMut>::into_owned(value))
    }
}
impl<'a> PropertyTypeMut<'a> for SecondaryEmailMut<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <<Text as Type>::Mut<'a> as DataTypeMut<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type SecondaryEmailV1Mut<'a> = SecondaryEmailMut<'a>;
