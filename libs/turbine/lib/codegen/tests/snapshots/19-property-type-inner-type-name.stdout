blockprotocol/blockprotocol/data/inner.rs

compile_error ! ("custom data types are not yet supported, see [#355](https://github.com/blockprotocol/blockprotocol/pull/355) for the official RFC") ;


---

https_blockprotocol_org_alice_property_type_user_id.rs

use alloc::vec::Vec;

use error_stack::{Report, Result, ResultExt as _};
use serde::Serialize;
use turbine::{
    types::data::Number, url, DataType, DataTypeMut, DataTypeRef, GenericPropertyError,
    PropertyType, PropertyTypeMut, PropertyTypeRef, Type, TypeMut, TypeRef, TypeUrl,
    VersionedUrlRef,
};

use crate::blockprotocol::blockprotocol::data::inner::Inner;
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
pub struct _Inner0(pub Number);
impl _Inner0 {
    fn try_from_value(value: serde_json::Value) -> Result<Self, GenericPropertError> {
        {
            let value = <Number as DataType>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }

    fn as_mut(&mut self) -> _Inner2<'_> {
        let Self(value) = self;
        _Inner2(<Number as Type>::as_mut(value))
    }

    fn as_ref(&self) -> _Inner1<'_> {
        let Self(value) = self;
        _Inner1(<Number as Type>::as_ref(value))
    }
}
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
pub struct _Inner1<'a>(pub <Number as Type>::Ref<'a>);
impl _Inner1<'a> {
    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, GenericPropertError> {
        {
            let value = <<Number as Type>::Ref<'a> as DataTypeRef<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }

    fn into_owned(self) -> _Inner0 {
        let Self(value) = self;
        _Inner0(<<Number as Type>::Ref<'_> as TypeRef>::into_owned(value))
    }
}
#[derive(Debug, Serialize)]
pub struct _Inner2<'a>(pub <Number as Type>::Mut<'a>);
impl _Inner2<'a> {
    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, GenericPropertError> {
        {
            let value = <<Number as Type>::Mut<'a> as DataTypeMut<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }

    fn into_owned(self) -> _Inner0 {
        let Self(value) = self;
        _Inner0(<<Number as Type>::Mut<'_> as TypeMut>::into_owned(value))
    }
}
///User ID
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
#[serde(untagged)]
pub enum UserId {
    Variant0(Inner),
    Variant1(Vec<_Inner0>),
}
impl TypeUrl for UserId {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("https://blockprotocol.org/@alice/property-type/user-id/" / v / 1u32);
}
impl Type for UserId {
    type Mut < 'a > = UserIdMut < 'a > where Self : 'a ;
    type Ref < 'a > = UserIdRef < 'a > where Self : 'a ;

    fn as_mut(&mut self) -> UserIdMut<'_> {
        match self {
            Self::Variant0(value) => <UserIdMut>::Variant0(<Inner as TypeMut>::as_mut(value)),
            Self::Variant1(value) => <UserIdMut>::Variant1(
                value
                    .iter_mut()
                    .map(|value| _Inner0::as_mut(value))
                    .collect(),
            ),
        }
    }

    fn as_ref(&self) -> UserIdRef<'_> {
        match self {
            Self::Variant0(value) => <UserIdRef>::Variant0(<Inner as Type>::as_ref(value)),
            Self::Variant1(value) => {
                <UserIdRef>::Variant1(value.iter().map(|value| _Inner0::as_ref(value)).collect())
            }
        }
    }
}
impl PropertyType for UserId {
    type Error = GenericPropertyError;

    fn try_from_value(value: serde_json::Value) -> Result<Self, Self::Error> {
        let mut errors: Result<(), GenericPropertyError> = Ok(());
        let this = {
            let value = <Inner as DataType>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self::Variant0)
        };
        match this {
            Ok(this) => return Ok(this),
            Err(error) => match &mut errors {
                Err(errors) => errors.extend_one(error),
                errors => *errors = Err(error),
            },
        }
        let this = {
            match value {
                serde_json::Value::Array(array) => turbine::fold_iter_reports(
                    array
                        .into_iter()
                        .map(|value| <_Inner0>::try_from_value(value)),
                )
                .map(Self::Variant1)
                .change_context(GenericPropertyError::Array),
                _ => Err(Report::new(GenericPropertyError::ExpectedArray)),
            }
        };
        match this {
            Ok(this) => return Ok(this),
            Err(error) => match &mut errors {
                Err(errors) => errors.extend_one(error),
                errors => *errors = Err(error),
            },
        }
        errors?;
        unreachable!();
    }
}
pub type UserIdV1 = UserId;
///User ID
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
#[serde(untagged)]
pub enum UserIdRef<'a> {
    Variant0(<Inner as Type>::Ref<'a>),
    Variant1(Vec<_Inner1<'a>>),
}
impl TypeUrl for UserIdRef<'_> {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("https://blockprotocol.org/@alice/property-type/user-id/" / v / 1u32);
}
impl TypeRef for UserIdRef<'_> {
    type Owned = UserId;

    fn into_owned(self) -> UserId {
        match self {
            Self::Variant0(value) => {
                <UserId>::Variant0(<<Inner as Type>::Ref<'_> as TypeRef>::into_owned(value))
            }
            Self::Variant1(value) => <UserId>::Variant1(
                value
                    .into_iter()
                    .map(|value| _Inner1::into_owned(value))
                    .collect(),
            ),
        }
    }
}
impl<'a> PropertyTypeRef<'a> for UserIdRef<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, Self::Error> {
        let mut errors: Result<(), GenericPropertyError> = Ok(());
        let this = {
            let value = <<Inner as Type>::Ref<'a> as DataTypeRef<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self::Variant0)
        };
        match this {
            Ok(this) => return Ok(this),
            Err(error) => match &mut errors {
                Err(errors) => errors.extend_one(error),
                errors => *errors = Err(error),
            },
        }
        let this = {
            match value {
                serde_json::Value::Array(array) => turbine::fold_iter_reports(
                    array
                        .into_iter()
                        .map(|value| <_Inner1<'a>>::try_from_value(value)),
                )
                .map(|array| array.into_boxed_slice())
                .map(Self::Variant1)
                .change_context(GenericPropertyError::Array),
                _ => Err(Report::new(GenericPropertyError::ExpectedArray)),
            }
        };
        match this {
            Ok(this) => return Ok(this),
            Err(error) => match &mut errors {
                Err(errors) => errors.extend_one(error),
                errors => *errors = Err(error),
            },
        }
        errors?;
        unreachable!();
    }
}
pub type UserIdV1Ref<'a> = UserIdRef<'a>;
///User ID
#[derive(Debug, Serialize)]
#[serde(untagged)]
pub enum UserIdMut<'a> {
    Variant0(<Inner as Type>::Mut<'a>),
    Variant1(Vec<_Inner2<'a>>),
}
impl TypeUrl for UserIdMut<'_> {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("https://blockprotocol.org/@alice/property-type/user-id/" / v / 1u32);
}
impl TypeMut for UserIdMut<'_> {
    type Owned = UserId;

    fn into_owned(self) -> UserId {
        match self {
            Self::Variant0(value) => {
                <UserId>::Variant0(<<Inner as Type>::Mut<'_> as TypeMut>::into_owned(value))
            }
            Self::Variant1(value) => <UserId>::Variant1(
                value
                    .into_iter()
                    .map(|value| _Inner2::into_owned(value))
                    .collect(),
            ),
        }
    }
}
impl<'a> PropertyTypeMut<'a> for UserIdMut<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, Self::Error> {
        let mut errors: Result<(), GenericPropertyError> = Ok(());
        let this = {
            let value = <<Inner as Type>::Mut<'a> as DataTypeMut<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self::Variant0)
        };
        match this {
            Ok(this) => return Ok(this),
            Err(error) => match &mut errors {
                Err(errors) => errors.extend_one(error),
                errors => *errors = Err(error),
            },
        }
        let this = {
            match value {
                serde_json::Value::Array(array) => turbine::fold_iter_reports(
                    array
                        .into_iter()
                        .map(|value| <_Inner2<'a>>::try_from_value(value)),
                )
                .map(Self::Variant1)
                .change_context(GenericPropertyError::Array),
                _ => Err(Report::new(GenericPropertyError::ExpectedArray)),
            }
        };
        match this {
            Ok(this) => return Ok(this),
            Err(error) => match &mut errors {
                Err(errors) => errors.extend_one(error),
                errors => *errors = Err(error),
            },
        }
        errors?;
        unreachable!();
    }
}
pub type UserIdV1Mut<'a> = UserIdMut<'a>;
