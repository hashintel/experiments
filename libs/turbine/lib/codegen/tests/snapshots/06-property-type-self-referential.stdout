blockprotocol/blockprotocol/property/email.rs

use error_stack::{Report, Result, ResultExt as _};
use serde::Serialize;
use turbine::{
    types::data::Text, url, DataType, DataTypeMut, DataTypeRef, GenericPropertyError, PropertyType,
    PropertyTypeMut, PropertyTypeRef, Type, TypeMut, TypeRef, TypeUrl, VersionedUrlRef,
};
///Primary E-Mail
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
pub struct Email(pub Text);
impl TypeUrl for Email {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("https://blockprotocol.org/@blockprotocol/types/property-type/email/" / v / 1u32);
}
impl Type for Email {
    type Mut < 'a > = EmailMut < 'a > where Self : 'a ;
    type Ref < 'a > = EmailRef < 'a > where Self : 'a ;

    fn as_mut(&mut self) -> EmailMut<'_> {
        let Self(value) = self;
        EmailMut(<Text as Type>::as_mut(value))
    }

    fn as_ref(&self) -> EmailRef<'_> {
        let Self(value) = self;
        EmailRef(<Text as Type>::as_ref(value))
    }
}
impl PropertyType for Email {
    type Error = GenericPropertyError;

    fn try_from_value(value: serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <Text as DataType>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type EmailV1 = Email;
///Primary E-Mail
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
pub struct EmailRef<'a>(pub <Text as Type>::Ref<'a>);
impl TypeUrl for EmailRef<'_> {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("https://blockprotocol.org/@blockprotocol/types/property-type/email/" / v / 1u32);
}
impl TypeRef for EmailRef<'_> {
    type Owned = Email;

    fn into_owned(self) -> Email {
        let Self(value) = self;
        Email(<<Text as Type>::Ref<'_> as TypeRef>::into_owned(value))
    }
}
impl<'a> PropertyTypeRef<'a> for EmailRef<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <<Text as Type>::Ref<'a> as DataTypeRef<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type EmailV1Ref<'a> = EmailRef<'a>;
///Primary E-Mail
#[derive(Debug, Serialize)]
pub struct EmailMut<'a>(pub <Text as Type>::Mut<'a>);
impl TypeUrl for EmailMut<'_> {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("https://blockprotocol.org/@blockprotocol/types/property-type/email/" / v / 1u32);
}
impl TypeMut for EmailMut<'_> {
    type Owned = Email;

    fn into_owned(self) -> Email {
        let Self(value) = self;
        Email(<<Text as Type>::Mut<'_> as TypeMut>::into_owned(value))
    }
}
impl<'a> PropertyTypeMut<'a> for EmailMut<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <<Text as Type>::Mut<'a> as DataTypeMut<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type EmailV1Mut<'a> = EmailMut<'a>;


---

https_blockprotocol_org_alice_property_type_contact_information.rs

use alloc::boxed::Box;

use error_stack::{Report, Result, ResultExt as _};
use serde::Serialize;
use turbine::{
    url, DataType, DataTypeMut, DataTypeRef, GenericPropertyError, PropertyType, PropertyTypeMut,
    PropertyTypeRef, Type, TypeMut, TypeRef, TypeUrl, VersionedUrlRef,
};

use crate::{
    blockprotocol::blockprotocol::property::email::Email,
    https_blockprotocol_org_alice_property_type_contact_information::ContactInformation as ContactInformation0,
};
///Contact Information
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
pub struct ContactInformation {
    #[serde(rename = "https://blockprotocol.org/@alice/property-type/contact-information/")]
    pub contact_information: Option<Box<ContactInformation0>>,
    #[serde(rename = "https://blockprotocol.org/@blockprotocol/types/property-type/email/")]
    pub email: Email,
}
impl TypeUrl for ContactInformation {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("https://blockprotocol.org/@alice/property-type/contact-information/" / v / 1u32);
}
impl Type for ContactInformation {
    type Mut < 'a > = ContactInformationMut < 'a > where Self : 'a ;
    type Ref < 'a > = ContactInformationRef < 'a > where Self : 'a ;

    fn as_mut(&mut self) -> ContactInformationMut<'_> {
        let Self {
            contact_information,
            email,
        } = self;
        ContactInformationMut {
            contact_information: contact_information.as_mut().map(|contact_information| {
                Box::new(<ContactInformation0 as Type>::as_mut(contact_information))
            }),
            email: <Email as Type>::as_mut(email),
        }
    }

    fn as_ref(&self) -> ContactInformationRef<'_> {
        let Self {
            contact_information,
            email,
        } = self;
        ContactInformationRef {
            contact_information: contact_information.as_ref().map(|contact_information| {
                Box::new(<ContactInformation0 as Type>::as_ref(contact_information))
            }),
            email: <Email as Type>::as_ref(email),
        }
    }
}
impl PropertyType for ContactInformation {
    type Error = GenericPropertyError;

    fn try_from_value(value: serde_json::Value) -> Result<Self, Self::Error> {
        'variant: {
            let serde_json::Value::Object(mut properties) = value.clone() else {
                break 'variant Err(Report::new(GenericPropertyError::ExpectedObject));
            };
            let contact_information = 'property: {
                let value = properties
                    .remove("https://blockprotocol.org/@alice/property-type/contact-information/");
                let Some(value) = value else {
                    break 'property Ok(None);
                };
                if value.is_null() {
                    break 'property Ok(None);
                };
                let value = <ContactInformation0>::try_from_value(value)
                    .map(Box::new)
                    .change_context(GenericPropertyError::Property(
                        "https://blockprotocol.org/@alice/property-type/contact-information/",
                    ));
                value.map(Some)
            };
            let email = 'property: {
                let value = properties
                    .remove("https://blockprotocol.org/@blockprotocol/types/property-type/email/");
                let Some(value) = value else {
                    break 'property Err(Report::new(GenericPropertyError::ExpectedProperty(
                        "https://blockprotocol.org/@blockprotocol/types/property-type/email/",
                    )));
                };
                let value =
                    <Email>::try_from_value(value).change_context(GenericPropertyError::Property(
                        "https://blockprotocol.org/@blockprotocol/types/property-type/email/",
                    ));
                value
            };
            let __report0 = turbine::fold_tuple_reports((contact_information, email));
            let ((contact_information, email),) = turbine::fold_tuple_reports((__report0,))?;
            let this = Self {
                contact_information,
                email,
            };
            Ok(this)
        }
    }
}
pub type ContactInformationV1 = ContactInformation;
///Contact Information
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
pub struct ContactInformationRef<'a> {
    #[serde(rename = "https://blockprotocol.org/@alice/property-type/contact-information/")]
    pub contact_information: Option<Box<<ContactInformation0 as Type>::Ref<'a>>>,
    #[serde(rename = "https://blockprotocol.org/@blockprotocol/types/property-type/email/")]
    pub email: <Email as Type>::Ref<'a>,
}
impl TypeUrl for ContactInformationRef<'_> {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("https://blockprotocol.org/@alice/property-type/contact-information/" / v / 1u32);
}
impl TypeRef for ContactInformationRef<'_> {
    type Owned = ContactInformation;

    fn into_owned(self) -> ContactInformation {
        let Self {
            contact_information,
            email,
        } = self;
        ContactInformation {
            contact_information: contact_information.map(|contact_information| {
                Box::new(
                    <<ContactInformation0 as Type>::Ref<'_> as TypeRef>::into_owned(
                        contact_information,
                    ),
                )
            }),
            email: <<Email as Type>::Ref<'_> as TypeRef>::into_owned(email),
        }
    }
}
impl<'a> PropertyTypeRef<'a> for ContactInformationRef<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, Self::Error> {
        'variant: {
            let serde_json::Value::Object(properties) = value else {
                break 'variant Err(Report::new(GenericPropertyError::ExpectedObject));
            };
            let contact_information = 'property: {
                let value = properties
                    .get("https://blockprotocol.org/@alice/property-type/contact-information/");
                let Some(value) = value else {
                    break 'property Ok(None);
                };
                if value.is_null() {
                    break 'property Ok(None);
                };
                let value = <<ContactInformation0 as Type>::Ref<'a>>::try_from_value(value)
                    .map(Box::new)
                    .change_context(GenericPropertyError::Property(
                        "https://blockprotocol.org/@alice/property-type/contact-information/",
                    ));
                value.map(Some)
            };
            let email = 'property: {
                let value = properties
                    .get("https://blockprotocol.org/@blockprotocol/types/property-type/email/");
                let Some(value) = value else {
                    break 'property Err(Report::new(GenericPropertyError::ExpectedProperty(
                        "https://blockprotocol.org/@blockprotocol/types/property-type/email/",
                    )));
                };
                let value = <<Email as Type>::Ref<'a>>::try_from_value(value).change_context(
                    GenericPropertyError::Property(
                        "https://blockprotocol.org/@blockprotocol/types/property-type/email/",
                    ),
                );
                value
            };
            let __report0 = turbine::fold_tuple_reports((contact_information, email));
            let ((contact_information, email),) = turbine::fold_tuple_reports((__report0,))?;
            let this = Self {
                contact_information,
                email,
            };
            Ok(this)
        }
    }
}
pub type ContactInformationV1Ref<'a> = ContactInformationRef<'a>;
///Contact Information
#[derive(Debug, Serialize)]
pub struct ContactInformationMut<'a> {
    #[serde(rename = "https://blockprotocol.org/@alice/property-type/contact-information/")]
    pub contact_information: Option<Box<<ContactInformation0 as Type>::Mut<'a>>>,
    #[serde(rename = "https://blockprotocol.org/@blockprotocol/types/property-type/email/")]
    pub email: <Email as Type>::Mut<'a>,
}
impl TypeUrl for ContactInformationMut<'_> {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("https://blockprotocol.org/@alice/property-type/contact-information/" / v / 1u32);
}
impl TypeMut for ContactInformationMut<'_> {
    type Owned = ContactInformation;

    fn into_owned(self) -> ContactInformation {
        let Self {
            contact_information,
            email,
        } = self;
        ContactInformation {
            contact_information: contact_information.map(|contact_information| {
                Box::new(
                    <<ContactInformation0 as Type>::Mut<'_> as TypeMut>::into_owned(
                        contact_information,
                    ),
                )
            }),
            email: <<Email as Type>::Mut<'_> as TypeMut>::into_owned(email),
        }
    }
}
impl<'a> PropertyTypeMut<'a> for ContactInformationMut<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, Self::Error> {
        'variant: {
            let serde_json::Value::Object(properties) = value else {
                break 'variant Err(Report::new(GenericPropertyError::ExpectedObject));
            };
            let contact_information = 'property: {
                let value = unsafe {
                    let value = properties.get_mut(
                        "https://blockprotocol.org/@alice/property-type/contact-information/",
                    );
                    let value = value.map(|value| value as *mut _);
                    value.map(|value: *mut serde_json::Value| &mut *value)
                };
                let Some(value) = value else {
                    break 'property Ok(None);
                };
                if value.is_null() {
                    break 'property Ok(None);
                };
                let value = <<ContactInformation0 as Type>::Mut<'a>>::try_from_value(value)
                    .map(Box::new)
                    .change_context(GenericPropertyError::Property(
                        "https://blockprotocol.org/@alice/property-type/contact-information/",
                    ));
                value.map(Some)
            };
            let email = 'property: {
                let value = unsafe {
                    let value = properties.get_mut(
                        "https://blockprotocol.org/@blockprotocol/types/property-type/email/",
                    );
                    let value = value.map(|value| value as *mut _);
                    value.map(|value: *mut serde_json::Value| &mut *value)
                };
                let Some(value) = value else {
                    break 'property Err(Report::new(GenericPropertyError::ExpectedProperty(
                        "https://blockprotocol.org/@blockprotocol/types/property-type/email/",
                    )));
                };
                let value = <<Email as Type>::Mut<'a>>::try_from_value(value).change_context(
                    GenericPropertyError::Property(
                        "https://blockprotocol.org/@blockprotocol/types/property-type/email/",
                    ),
                );
                value
            };
            let __report0 = turbine::fold_tuple_reports((contact_information, email));
            let ((contact_information, email),) = turbine::fold_tuple_reports((__report0,))?;
            let this = Self {
                contact_information,
                email,
            };
            Ok(this)
        }
    }
}
pub type ContactInformationV1Mut<'a> = ContactInformationMut<'a>;
