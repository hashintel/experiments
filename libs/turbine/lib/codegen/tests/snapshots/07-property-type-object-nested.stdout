blockprotocol/blockprotocol/property/favorite_film.rs

use error_stack::{Report, Result, ResultExt as _};
use serde::Serialize;
use turbine::{
    types::data::Text, url, DataType, DataTypeMut, DataTypeRef, GenericPropertyError, PropertyType,
    PropertyTypeMut, PropertyTypeRef, Type, TypeMut, TypeRef, TypeUrl, VersionedUrlRef,
};
///Favorite Film
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
pub struct FavoriteFilm(pub Text);
impl TypeUrl for FavoriteFilm {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> = url!(
        "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-film/" / v / 1u32
    );
}
impl Type for FavoriteFilm {
    type Mut < 'a > = FavoriteFilmMut < 'a > where Self : 'a ;
    type Ref < 'a > = FavoriteFilmRef < 'a > where Self : 'a ;

    fn as_mut(&mut self) -> FavoriteFilmMut<'_> {
        let Self(value) = self;
        FavoriteFilmMut(<Text as Type>::as_mut(value))
    }

    fn as_ref(&self) -> FavoriteFilmRef<'_> {
        let Self(value) = self;
        FavoriteFilmRef(<Text as Type>::as_ref(value))
    }
}
impl PropertyType for FavoriteFilm {
    type Error = GenericPropertyError;

    fn try_from_value(value: serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <Text as DataType>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type FavoriteFilmV1 = FavoriteFilm;
///Favorite Film
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
pub struct FavoriteFilmRef<'a>(pub <Text as Type>::Ref<'a>);
impl TypeUrl for FavoriteFilmRef<'_> {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> = url!(
        "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-film/" / v / 1u32
    );
}
impl TypeRef for FavoriteFilmRef<'_> {
    type Owned = FavoriteFilm;

    fn into_owned(self) -> FavoriteFilm {
        let Self(value) = self;
        FavoriteFilm(<<Text as Type>::Ref<'_> as TypeRef>::into_owned(value))
    }
}
impl<'a> PropertyTypeRef<'a> for FavoriteFilmRef<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <<Text as Type>::Ref<'a> as DataTypeRef<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type FavoriteFilmV1Ref<'a> = FavoriteFilmRef<'a>;
///Favorite Film
#[derive(Debug, Serialize)]
pub struct FavoriteFilmMut<'a>(pub <Text as Type>::Mut<'a>);
impl TypeUrl for FavoriteFilmMut<'_> {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> = url!(
        "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-film/" / v / 1u32
    );
}
impl TypeMut for FavoriteFilmMut<'_> {
    type Owned = FavoriteFilm;

    fn into_owned(self) -> FavoriteFilm {
        let Self(value) = self;
        FavoriteFilm(<<Text as Type>::Mut<'_> as TypeMut>::into_owned(value))
    }
}
impl<'a> PropertyTypeMut<'a> for FavoriteFilmMut<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <<Text as Type>::Mut<'a> as DataTypeMut<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type FavoriteFilmV1Mut<'a> = FavoriteFilmMut<'a>;


---

blockprotocol/blockprotocol/property/favorite_song.rs

use error_stack::{Report, Result, ResultExt as _};
use serde::Serialize;
use turbine::{
    types::data::Text, url, DataType, DataTypeMut, DataTypeRef, GenericPropertyError, PropertyType,
    PropertyTypeMut, PropertyTypeRef, Type, TypeMut, TypeRef, TypeUrl, VersionedUrlRef,
};
///Favorite Song
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
pub struct FavoriteSong(pub Text);
impl TypeUrl for FavoriteSong {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> = url!(
        "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-song/" / v / 1u32
    );
}
impl Type for FavoriteSong {
    type Mut < 'a > = FavoriteSongMut < 'a > where Self : 'a ;
    type Ref < 'a > = FavoriteSongRef < 'a > where Self : 'a ;

    fn as_mut(&mut self) -> FavoriteSongMut<'_> {
        let Self(value) = self;
        FavoriteSongMut(<Text as Type>::as_mut(value))
    }

    fn as_ref(&self) -> FavoriteSongRef<'_> {
        let Self(value) = self;
        FavoriteSongRef(<Text as Type>::as_ref(value))
    }
}
impl PropertyType for FavoriteSong {
    type Error = GenericPropertyError;

    fn try_from_value(value: serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <Text as DataType>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type FavoriteSongV1 = FavoriteSong;
///Favorite Song
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
pub struct FavoriteSongRef<'a>(pub <Text as Type>::Ref<'a>);
impl TypeUrl for FavoriteSongRef<'_> {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> = url!(
        "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-song/" / v / 1u32
    );
}
impl TypeRef for FavoriteSongRef<'_> {
    type Owned = FavoriteSong;

    fn into_owned(self) -> FavoriteSong {
        let Self(value) = self;
        FavoriteSong(<<Text as Type>::Ref<'_> as TypeRef>::into_owned(value))
    }
}
impl<'a> PropertyTypeRef<'a> for FavoriteSongRef<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <<Text as Type>::Ref<'a> as DataTypeRef<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type FavoriteSongV1Ref<'a> = FavoriteSongRef<'a>;
///Favorite Song
#[derive(Debug, Serialize)]
pub struct FavoriteSongMut<'a>(pub <Text as Type>::Mut<'a>);
impl TypeUrl for FavoriteSongMut<'_> {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> = url!(
        "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-song/" / v / 1u32
    );
}
impl TypeMut for FavoriteSongMut<'_> {
    type Owned = FavoriteSong;

    fn into_owned(self) -> FavoriteSong {
        let Self(value) = self;
        FavoriteSong(<<Text as Type>::Mut<'_> as TypeMut>::into_owned(value))
    }
}
impl<'a> PropertyTypeMut<'a> for FavoriteSongMut<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <<Text as Type>::Mut<'a> as DataTypeMut<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type FavoriteSongV1Mut<'a> = FavoriteSongMut<'a>;


---

blockprotocol/blockprotocol/property/hobby.rs

use error_stack::{Report, Result, ResultExt as _};
use serde::Serialize;
use turbine::{
    types::data::Text, url, DataType, DataTypeMut, DataTypeRef, GenericPropertyError, PropertyType,
    PropertyTypeMut, PropertyTypeRef, Type, TypeMut, TypeRef, TypeUrl, VersionedUrlRef,
};
///Hobby
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
pub struct Hobby(pub Text);
impl TypeUrl for Hobby {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("https://blockprotocol.org/@blockprotocol/types/property-type/hobby/" / v / 1u32);
}
impl Type for Hobby {
    type Mut < 'a > = HobbyMut < 'a > where Self : 'a ;
    type Ref < 'a > = HobbyRef < 'a > where Self : 'a ;

    fn as_mut(&mut self) -> HobbyMut<'_> {
        let Self(value) = self;
        HobbyMut(<Text as Type>::as_mut(value))
    }

    fn as_ref(&self) -> HobbyRef<'_> {
        let Self(value) = self;
        HobbyRef(<Text as Type>::as_ref(value))
    }
}
impl PropertyType for Hobby {
    type Error = GenericPropertyError;

    fn try_from_value(value: serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <Text as DataType>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type HobbyV1 = Hobby;
///Hobby
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
pub struct HobbyRef<'a>(pub <Text as Type>::Ref<'a>);
impl TypeUrl for HobbyRef<'_> {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("https://blockprotocol.org/@blockprotocol/types/property-type/hobby/" / v / 1u32);
}
impl TypeRef for HobbyRef<'_> {
    type Owned = Hobby;

    fn into_owned(self) -> Hobby {
        let Self(value) = self;
        Hobby(<<Text as Type>::Ref<'_> as TypeRef>::into_owned(value))
    }
}
impl<'a> PropertyTypeRef<'a> for HobbyRef<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <<Text as Type>::Ref<'a> as DataTypeRef<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type HobbyV1Ref<'a> = HobbyRef<'a>;
///Hobby
#[derive(Debug, Serialize)]
pub struct HobbyMut<'a>(pub <Text as Type>::Mut<'a>);
impl TypeUrl for HobbyMut<'_> {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("https://blockprotocol.org/@blockprotocol/types/property-type/hobby/" / v / 1u32);
}
impl TypeMut for HobbyMut<'_> {
    type Owned = Hobby;

    fn into_owned(self) -> Hobby {
        let Self(value) = self;
        Hobby(<<Text as Type>::Mut<'_> as TypeMut>::into_owned(value))
    }
}
impl<'a> PropertyTypeMut<'a> for HobbyMut<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <<Text as Type>::Mut<'a> as DataTypeMut<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type HobbyV1Mut<'a> = HobbyMut<'a>;


---

https_blockprotocol_org_alice_property_type_interests.rs

use alloc::{boxed::Box, vec::Vec};

use error_stack::{Report, Result, ResultExt as _};
use serde::Serialize;
use turbine::{
    url, DataType, DataTypeMut, DataTypeRef, GenericPropertyError, PropertyType, PropertyTypeMut,
    PropertyTypeRef, Type, TypeMut, TypeRef, TypeUrl, VersionedUrlRef,
};

use crate::blockprotocol::blockprotocol::property::{
    favorite_film::FavoriteFilm, favorite_song::FavoriteSong, hobby::Hobby,
};
///Interests
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
pub struct Interests {
    #[serde(
        rename = "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-film/"
    )]
    pub favorite_film: Option<FavoriteFilm>,
    #[serde(
        rename = "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-song/"
    )]
    pub favorite_song: Option<FavoriteSong>,
    #[serde(rename = "https://blockprotocol.org/@blockprotocol/types/property-type/hobby/")]
    pub hobby: Option<Vec<Hobby>>,
}
impl TypeUrl for Interests {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("https://blockprotocol.org/@alice/property-type/interests/" / v / 1u32);
}
impl Type for Interests {
    type Mut < 'a > = InterestsMut < 'a > where Self : 'a ;
    type Ref < 'a > = InterestsRef < 'a > where Self : 'a ;

    fn as_mut(&mut self) -> InterestsMut<'_> {
        let Self {
            favorite_film,
            favorite_song,
            hobby,
        } = self;
        InterestsMut {
            favorite_film: favorite_film
                .as_mut()
                .map(|favorite_film| <FavoriteFilm as Type>::as_mut(favorite_film)),
            favorite_song: favorite_song
                .as_mut()
                .map(|favorite_song| <FavoriteSong as Type>::as_mut(favorite_song)),
            hobby: hobby.as_mut().map(|hobby| {
                hobby
                    .iter_mut()
                    .map(|hobby| <Hobby as Type>::as_mut(hobby))
                    .collect()
            }),
        }
    }

    fn as_ref(&self) -> InterestsRef<'_> {
        let Self {
            favorite_film,
            favorite_song,
            hobby,
        } = self;
        InterestsRef {
            favorite_film: favorite_film
                .as_ref()
                .map(|favorite_film| <FavoriteFilm as Type>::as_ref(favorite_film)),
            favorite_song: favorite_song
                .as_ref()
                .map(|favorite_song| <FavoriteSong as Type>::as_ref(favorite_song)),
            hobby: hobby.as_ref().map(|hobby| {
                hobby
                    .iter()
                    .map(|hobby| <Hobby as Type>::as_ref(hobby))
                    .collect()
            }),
        }
    }
}
impl PropertyType for Interests {
    type Error = GenericPropertyError;

    fn try_from_value(value: serde_json::Value) -> Result<Self, Self::Error> {
        'variant: {
            let serde_json::Value::Object(mut properties) = value.clone() else {
                break 'variant Err(Report::new(GenericPropertyError::ExpectedObject));
            };
            let favorite_film = 'property: {
                let value = properties.remove(
                    "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-film/",
                );
                let Some(value) = value else {
                    break 'property Ok(None);
                };
                if value.is_null() {
                    break 'property Ok(None);
                };
                let value = <FavoriteFilm>::try_from_value(value)
                    .change_context(GenericPropertyError::Property(
                    "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-film/",
                ));
                value.map(Some)
            };
            let favorite_song = 'property: {
                let value = properties.remove(
                    "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-song/",
                );
                let Some(value) = value else {
                    break 'property Ok(None);
                };
                if value.is_null() {
                    break 'property Ok(None);
                };
                let value = <FavoriteSong>::try_from_value(value)
                    .change_context(GenericPropertyError::Property(
                    "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-song/",
                ));
                value.map(Some)
            };
            let hobby = 'property: {
                let value = properties
                    .remove("https://blockprotocol.org/@blockprotocol/types/property-type/hobby/");
                let Some(value) = value else {
                    break 'property Ok(None);
                };
                if value.is_null() {
                    break 'property Ok(None);
                };
                let value = if let serde_json::Value::Array(value) = value {
                    turbine::fold_iter_reports(
                        value
                            .into_iter()
                            .map(|value| <Hobby>::try_from_value(value)),
                    )
                    .change_context(GenericPropertyError::Property(
                        "https://blockprotocol.org/@blockprotocol/types/property-type/hobby/",
                    ))
                } else {
                    Err(Report::new(GenericPropertyError::ExpectedArray(
                        "https://blockprotocol.org/@blockprotocol/types/property-type/hobby/",
                    )))
                };
                value.map(Some)
            };
            let __report0 = turbine::fold_tuple_reports((favorite_film, favorite_song, hobby));
            let ((favorite_film, favorite_song, hobby),) =
                turbine::fold_tuple_reports((__report0,))?;
            let this = Self {
                favorite_film,
                favorite_song,
                hobby,
            };
            Ok(this)
        }
    }
}
pub type InterestsV1 = Interests;
///Interests
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
pub struct InterestsRef<'a> {
    #[serde(
        rename = "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-film/"
    )]
    pub favorite_film: Option<<FavoriteFilm as Type>::Ref<'a>>,
    #[serde(
        rename = "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-song/"
    )]
    pub favorite_song: Option<<FavoriteSong as Type>::Ref<'a>>,
    #[serde(rename = "https://blockprotocol.org/@blockprotocol/types/property-type/hobby/")]
    pub hobby: Option<Box<[<Hobby as Type>::Ref<'a>]>>,
}
impl TypeUrl for InterestsRef<'_> {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("https://blockprotocol.org/@alice/property-type/interests/" / v / 1u32);
}
impl TypeRef for InterestsRef<'_> {
    type Owned = Interests;

    fn into_owned(self) -> Interests {
        let Self {
            favorite_film,
            favorite_song,
            hobby,
        } = self;
        Interests {
            favorite_film: favorite_film.map(|favorite_film| {
                <<FavoriteFilm as Type>::Ref<'_> as TypeRef>::into_owned(favorite_film)
            }),
            favorite_song: favorite_song.map(|favorite_song| {
                <<FavoriteSong as Type>::Ref<'_> as TypeRef>::into_owned(favorite_song)
            }),
            hobby: hobby.map(|hobby| {
                hobby
                    .into_vec()
                    .into_iter()
                    .map(|hobby| <<Hobby as Type>::Ref<'_> as TypeRef>::into_owned(hobby))
                    .collect()
            }),
        }
    }
}
impl<'a> PropertyTypeRef<'a> for InterestsRef<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, Self::Error> {
        'variant: {
            let serde_json::Value::Object(properties) = value else {
                break 'variant Err(Report::new(GenericPropertyError::ExpectedObject));
            };
            let favorite_film = 'property: {
                let value = properties.get(
                    "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-film/",
                );
                let Some(value) = value else {
                    break 'property Ok(None);
                };
                if value.is_null() {
                    break 'property Ok(None);
                };
                let value = <<FavoriteFilm as Type>::Ref<'a>>::try_from_value(value)
                    .change_context(GenericPropertyError::Property(
                    "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-film/",
                ));
                value.map(Some)
            };
            let favorite_song = 'property: {
                let value = properties.get(
                    "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-song/",
                );
                let Some(value) = value else {
                    break 'property Ok(None);
                };
                if value.is_null() {
                    break 'property Ok(None);
                };
                let value = <<FavoriteSong as Type>::Ref<'a>>::try_from_value(value)
                    .change_context(GenericPropertyError::Property(
                    "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-song/",
                ));
                value.map(Some)
            };
            let hobby = 'property: {
                let value = properties
                    .get("https://blockprotocol.org/@blockprotocol/types/property-type/hobby/");
                let Some(value) = value else {
                    break 'property Ok(None);
                };
                if value.is_null() {
                    break 'property Ok(None);
                };
                let value = if let serde_json::Value::Array(value) = value {
                    turbine::fold_iter_reports(
                        value
                            .into_iter()
                            .map(|value| <<Hobby as Type>::Ref<'a>>::try_from_value(value)),
                    )
                    .map(|array| array.into_boxed_slice())
                    .change_context(GenericPropertyError::Property(
                        "https://blockprotocol.org/@blockprotocol/types/property-type/hobby/",
                    ))
                } else {
                    Err(Report::new(GenericPropertyError::ExpectedArray(
                        "https://blockprotocol.org/@blockprotocol/types/property-type/hobby/",
                    )))
                };
                value.map(Some)
            };
            let __report0 = turbine::fold_tuple_reports((favorite_film, favorite_song, hobby));
            let ((favorite_film, favorite_song, hobby),) =
                turbine::fold_tuple_reports((__report0,))?;
            let this = Self {
                favorite_film,
                favorite_song,
                hobby,
            };
            Ok(this)
        }
    }
}
pub type InterestsV1Ref<'a> = InterestsRef<'a>;
///Interests
#[derive(Debug, Serialize)]
pub struct InterestsMut<'a> {
    #[serde(
        rename = "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-film/"
    )]
    pub favorite_film: Option<<FavoriteFilm as Type>::Mut<'a>>,
    #[serde(
        rename = "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-song/"
    )]
    pub favorite_song: Option<<FavoriteSong as Type>::Mut<'a>>,
    #[serde(rename = "https://blockprotocol.org/@blockprotocol/types/property-type/hobby/")]
    pub hobby: Option<Vec<<Hobby as Type>::Mut<'a>>>,
}
impl TypeUrl for InterestsMut<'_> {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("https://blockprotocol.org/@alice/property-type/interests/" / v / 1u32);
}
impl TypeMut for InterestsMut<'_> {
    type Owned = Interests;

    fn into_owned(self) -> Interests {
        let Self {
            favorite_film,
            favorite_song,
            hobby,
        } = self;
        Interests {
            favorite_film: favorite_film.map(|favorite_film| {
                <<FavoriteFilm as Type>::Mut<'_> as TypeMut>::into_owned(favorite_film)
            }),
            favorite_song: favorite_song.map(|favorite_song| {
                <<FavoriteSong as Type>::Mut<'_> as TypeMut>::into_owned(favorite_song)
            }),
            hobby: hobby.map(|hobby| {
                hobby
                    .into_iter()
                    .map(|hobby| <<Hobby as Type>::Mut<'_> as TypeMut>::into_owned(hobby))
                    .collect()
            }),
        }
    }
}
impl<'a> PropertyTypeMut<'a> for InterestsMut<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, Self::Error> {
        'variant: {
            let serde_json::Value::Object(properties) = value else {
                break 'variant Err(Report::new(GenericPropertyError::ExpectedObject));
            };
            let favorite_film = 'property: {
                let value = unsafe {
                    let value = properties . get_mut ("https://blockprotocol.org/@blockprotocol/types/property-type/favorite-film/") ;
                    let value = value.map(|value| value as *mut _);
                    value.map(|value: *mut serde_json::Value| &mut *value)
                };
                let Some(value) = value else {
                    break 'property Ok(None);
                };
                if value.is_null() {
                    break 'property Ok(None);
                };
                let value = <<FavoriteFilm as Type>::Mut<'a>>::try_from_value(value)
                    .change_context(GenericPropertyError::Property(
                    "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-film/",
                ));
                value.map(Some)
            };
            let favorite_song = 'property: {
                let value = unsafe {
                    let value = properties . get_mut ("https://blockprotocol.org/@blockprotocol/types/property-type/favorite-song/") ;
                    let value = value.map(|value| value as *mut _);
                    value.map(|value: *mut serde_json::Value| &mut *value)
                };
                let Some(value) = value else {
                    break 'property Ok(None);
                };
                if value.is_null() {
                    break 'property Ok(None);
                };
                let value = <<FavoriteSong as Type>::Mut<'a>>::try_from_value(value)
                    .change_context(GenericPropertyError::Property(
                    "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-song/",
                ));
                value.map(Some)
            };
            let hobby = 'property: {
                let value = unsafe {
                    let value = properties.get_mut(
                        "https://blockprotocol.org/@blockprotocol/types/property-type/hobby/",
                    );
                    let value = value.map(|value| value as *mut _);
                    value.map(|value: *mut serde_json::Value| &mut *value)
                };
                let Some(value) = value else {
                    break 'property Ok(None);
                };
                if value.is_null() {
                    break 'property Ok(None);
                };
                let value = if let serde_json::Value::Array(value) = value {
                    turbine::fold_iter_reports(
                        value
                            .into_iter()
                            .map(|value| <<Hobby as Type>::Mut<'a>>::try_from_value(value)),
                    )
                    .change_context(GenericPropertyError::Property(
                        "https://blockprotocol.org/@blockprotocol/types/property-type/hobby/",
                    ))
                } else {
                    Err(Report::new(GenericPropertyError::ExpectedArray(
                        "https://blockprotocol.org/@blockprotocol/types/property-type/hobby/",
                    )))
                };
                value.map(Some)
            };
            let __report0 = turbine::fold_tuple_reports((favorite_film, favorite_song, hobby));
            let ((favorite_film, favorite_song, hobby),) =
                turbine::fold_tuple_reports((__report0,))?;
            let this = Self {
                favorite_film,
                favorite_song,
                hobby,
            };
            Ok(this)
        }
    }
}
pub type InterestsV1Mut<'a> = InterestsMut<'a>;
