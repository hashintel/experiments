https_blockprotocol_org_alice_property_type_contrived_property.rs

use alloc::vec::Vec;

use error_stack::{Report, Result, ResultExt as _};
use serde::Serialize;
use turbine::{
    types::data::Number, url, DataType, DataTypeMut, DataTypeRef, GenericPropertyError,
    PropertyType, PropertyTypeMut, PropertyTypeRef, Type, TypeMut, TypeRef, TypeUrl,
    VersionedUrlRef,
};
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
pub struct Inner0(pub Number);
impl Inner0 {
    fn try_from_value(value: serde_json::Value) -> Result<Self, GenericPropertError> {
        {
            let value = <Number as DataType>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }

    fn as_mut(&mut self) -> Inner2<'_> {
        let Self(value) = self;
        Inner2(<Number as Type>::as_mut(value))
    }

    fn as_ref(&self) -> Inner1<'_> {
        let Self(value) = self;
        Inner1(<Number as Type>::as_ref(value))
    }
}
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
pub struct Inner1<'a>(pub <Number as Type>::Ref<'a>);
impl Inner1<'a> {
    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, GenericPropertError> {
        {
            let value = <<Number as Type>::Ref<'a> as DataTypeRef<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }

    fn into_owned(self) -> Inner0 {
        let Self(value) = self;
        Inner0(<<Number as Type>::Ref<'_> as TypeRef>::into_owned(value))
    }
}
#[derive(Debug, Serialize)]
pub struct Inner2<'a>(pub <Number as Type>::Mut<'a>);
impl Inner2<'a> {
    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, GenericPropertError> {
        {
            let value = <<Number as Type>::Mut<'a> as DataTypeMut<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }

    fn into_owned(self) -> Inner0 {
        let Self(value) = self;
        Inner0(<<Number as Type>::Mut<'_> as TypeMut>::into_owned(value))
    }
}
///Contrived Property
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
#[serde(untagged)]
pub enum ContrivedProperty {
    Variant0(Number),
    Variant1(Vec<Inner0>),
}
impl TypeUrl for ContrivedProperty {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("https://blockprotocol.org/@alice/property-type/contrived-property/" / v / 1u32);
}
impl Type for ContrivedProperty {
    type Mut < 'a > = ContrivedPropertyMut < 'a > where Self : 'a ;
    type Ref < 'a > = ContrivedPropertyRef < 'a > where Self : 'a ;

    fn as_mut(&mut self) -> ContrivedPropertyMut<'_> {
        match self {
            Self::Variant0(value) => {
                <ContrivedPropertyMut>::Variant0(<Number as TypeMut>::as_mut(value))
            }
            Self::Variant1(value) => <ContrivedPropertyMut>::Variant1(
                value
                    .iter_mut()
                    .map(|value| Inner0::as_mut(value))
                    .collect(),
            ),
        }
    }

    fn as_ref(&self) -> ContrivedPropertyRef<'_> {
        match self {
            Self::Variant0(value) => {
                <ContrivedPropertyRef>::Variant0(<Number as Type>::as_ref(value))
            }
            Self::Variant1(value) => <ContrivedPropertyRef>::Variant1(
                value.iter().map(|value| Inner0::as_ref(value)).collect(),
            ),
        }
    }
}
impl PropertyType for ContrivedProperty {
    type Error = GenericPropertyError;

    fn try_from_value(value: serde_json::Value) -> Result<Self, Self::Error> {
        let mut errors: Result<(), GenericPropertyError> = Ok(());
        let this = {
            let value = <Number as DataType>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self::Variant0)
        };
        match this {
            Ok(this) => return Ok(this),
            Err(error) => match &mut errors {
                Err(errors) => errors.extend_one(error),
                errors => *errors = Err(error),
            },
        }
        let this = {
            match value {
                serde_json::Value::Array(array) => turbine::fold_iter_reports(
                    array
                        .into_iter()
                        .map(|value| <Inner0>::try_from_value(value)),
                )
                .map(Self::Variant1)
                .change_context(GenericPropertyError::Array),
                _ => Err(Report::new(GenericPropertyError::ExpectedArray)),
            }
        };
        match this {
            Ok(this) => return Ok(this),
            Err(error) => match &mut errors {
                Err(errors) => errors.extend_one(error),
                errors => *errors = Err(error),
            },
        }
        errors?;
        unreachable!();
    }
}
pub type ContrivedPropertyV1 = ContrivedProperty;
///Contrived Property
#[derive(Debug, PartialEq, Eq, Clone, Serialize)]
#[serde(untagged)]
pub enum ContrivedPropertyRef<'a> {
    Variant0(<Number as Type>::Ref<'a>),
    Variant1(Vec<Inner1<'a>>),
}
impl TypeUrl for ContrivedPropertyRef<'_> {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("https://blockprotocol.org/@alice/property-type/contrived-property/" / v / 1u32);
}
impl TypeRef for ContrivedPropertyRef<'_> {
    type Owned = ContrivedProperty;

    fn into_owned(self) -> ContrivedProperty {
        match self {
            Self::Variant0(value) => <ContrivedProperty>::Variant0(
                <<Number as Type>::Ref<'_> as TypeRef>::into_owned(value),
            ),
            Self::Variant1(value) => <ContrivedProperty>::Variant1(
                value
                    .into_iter()
                    .map(|value| Inner1::into_owned(value))
                    .collect(),
            ),
        }
    }
}
impl<'a> PropertyTypeRef<'a> for ContrivedPropertyRef<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, Self::Error> {
        let mut errors: Result<(), GenericPropertyError> = Ok(());
        let this = {
            let value = <<Number as Type>::Ref<'a> as DataTypeRef<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self::Variant0)
        };
        match this {
            Ok(this) => return Ok(this),
            Err(error) => match &mut errors {
                Err(errors) => errors.extend_one(error),
                errors => *errors = Err(error),
            },
        }
        let this = {
            match value {
                serde_json::Value::Array(array) => turbine::fold_iter_reports(
                    array
                        .into_iter()
                        .map(|value| <Inner1<'a>>::try_from_value(value)),
                )
                .map(|array| array.into_boxed_slice())
                .map(Self::Variant1)
                .change_context(GenericPropertyError::Array),
                _ => Err(Report::new(GenericPropertyError::ExpectedArray)),
            }
        };
        match this {
            Ok(this) => return Ok(this),
            Err(error) => match &mut errors {
                Err(errors) => errors.extend_one(error),
                errors => *errors = Err(error),
            },
        }
        errors?;
        unreachable!();
    }
}
pub type ContrivedPropertyV1Ref<'a> = ContrivedPropertyRef<'a>;
///Contrived Property
#[derive(Debug, Serialize)]
#[serde(untagged)]
pub enum ContrivedPropertyMut<'a> {
    Variant0(<Number as Type>::Mut<'a>),
    Variant1(Vec<Inner2<'a>>),
}
impl TypeUrl for ContrivedPropertyMut<'_> {
    type InheritsFrom = ();

    const ID: VersionedUrlRef<'static> =
        url!("https://blockprotocol.org/@alice/property-type/contrived-property/" / v / 1u32);
}
impl TypeMut for ContrivedPropertyMut<'_> {
    type Owned = ContrivedProperty;

    fn into_owned(self) -> ContrivedProperty {
        match self {
            Self::Variant0(value) => <ContrivedProperty>::Variant0(
                <<Number as Type>::Mut<'_> as TypeMut>::into_owned(value),
            ),
            Self::Variant1(value) => <ContrivedProperty>::Variant1(
                value
                    .into_iter()
                    .map(|value| Inner2::into_owned(value))
                    .collect(),
            ),
        }
    }
}
impl<'a> PropertyTypeMut<'a> for ContrivedPropertyMut<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, Self::Error> {
        let mut errors: Result<(), GenericPropertyError> = Ok(());
        let this = {
            let value = <<Number as Type>::Mut<'a> as DataTypeMut<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self::Variant0)
        };
        match this {
            Ok(this) => return Ok(this),
            Err(error) => match &mut errors {
                Err(errors) => errors.extend_one(error),
                errors => *errors = Err(error),
            },
        }
        let this = {
            match value {
                serde_json::Value::Array(array) => turbine::fold_iter_reports(
                    array
                        .into_iter()
                        .map(|value| <Inner2<'a>>::try_from_value(value)),
                )
                .map(Self::Variant1)
                .change_context(GenericPropertyError::Array),
                _ => Err(Report::new(GenericPropertyError::ExpectedArray)),
            }
        };
        match this {
            Ok(this) => return Ok(this),
            Err(error) => match &mut errors {
                Err(errors) => errors.extend_one(error),
                errors => *errors = Err(error),
            },
        }
        errors?;
        unreachable!();
    }
}
pub type ContrivedPropertyV1Mut<'a> = ContrivedPropertyMut<'a>;
